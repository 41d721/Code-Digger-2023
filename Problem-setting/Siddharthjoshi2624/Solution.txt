#include<bits/stdc++.h>
using namespace std;
#define f first
#define s second
using ll=long long;
class HashedString {
  private:
	// change M and B if you want
	static const ll M = (1LL << 61) - 1;
	static const ll B;

	// pow[i] contains B^i % M
	static vector<ll> pow;

	// p_hash[i] is the hash of the first i characters of the given string
	vector<ll> p_hash;

	__int128 mul(ll a, ll b) { return (__int128)a * b; }
	ll mod_mul(ll a, ll b) { return mul(a, b) % M; }

  public:
	HashedString(const string &s) : p_hash(s.size() + 1) {
		while (pow.size() < s.size()) { pow.push_back(mod_mul(pow.back(), B)); }
		p_hash[0] = 0;
		for (long long i = 0; i < s.size(); i++) {
			p_hash[i + 1] = (mul(p_hash[i], B) + s[i]) % M;
		}
	}

	ll getHash(long long start, long long end) {
		ll raw_val =
		    p_hash[end + 1] - mod_mul(p_hash[start], pow[end - start + 1]);
		return (raw_val + M) % M;
	}
};
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
vector<ll> HashedString::pow = {1};
const ll HashedString::B = uniform_int_distribution<ll>(0, M - 1)(rng);

void solve(){
	long long n;
	cin>>n;
	string s;
	cin>>s;
	string temp=s;
	reverse(temp.begin(),temp.end());
	HashedString S(s),T(temp);
	vector<long long> ans(n + 1,1);
	for(int i=1;i<=n;i++){
		for(int j=1;j+i-1<n;j++){
			if(S.getHash(0,i-1)==S.getHash(j,j+i-1))
				ans[i]++;
		}
	}
	// for(long long i=1;i<=n;i++){ //you can check that ans[i] contains no of times a given preifx(s[1->i]) occurs in the string
	// 	cout<<ans[i]<<' ';
	// }
	
	long long mxx=0;
	for(long long i=1;i<=n;i++){
		if(S.getHash(0,i-1)==T.getHash(n-i,n-1)){
			mxx=max(mxx,i*ans[i]);
		}
	}
	cout<<mxx<<'\n';
}

signed main(){
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
   	#ifndef ONLINE_JUDGE
       freopen("input.txt","r",stdin); 
       freopen("output.txt","w",stdout); 
       freopen("Error.txt","w",stderr);
       auto start_time = chrono::steady_clock::now();
 	#endif
    
       long long zz=1;
       cin>>zz;
       while(zz--){
       	solve();
       }

   	#ifndef ONLINE_JUDGE
    	auto end_time = chrono::steady_clock::now();
    	auto diff_time = end_time - start_time;
    	cout << "Execution time : " << fixed << setprecision(5) <<  chrono::duration <double, milli> (diff_time).count() << " ms" << endl;
	#endif

   return 0;
}
